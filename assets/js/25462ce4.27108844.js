(self.webpackChunkdocusaurus_try=self.webpackChunkdocusaurus_try||[]).push([[532],{4936:(e,n,r)=>{"use strict";r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var t=r(7462),i=(r(7294),r(3905)),o=r(3456);const a={title:"Sync"},s="GraphQL Syncing Candidate Designs",d={unversionedId:"Design/sync",id:"Design/sync",title:"Sync",description:"Design 1",source:"@site/docs/Design/sync.md",sourceDirName:"Design",slug:"/Design/sync",permalink:"/docs/Design/sync",draft:!1,editUrl:"https://github.com/CrossCopy/crosscopy-doc/edit/develop/docs/Design/sync.md",tags:[],version:"current",frontMatter:{title:"Sync"},sidebar:"tutorialSidebar",previous:{title:"Plugin",permalink:"/docs/Design/plugin"}},l={},c=[{value:"Design 1",id:"design-1",level:2},{value:"Design 2",id:"design-2",level:2},{value:"Design 3",id:"design-3",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:c};function p(e){let{components:n,...r}=e;return(0,i.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"graphql-syncing-candidate-designs"},"GraphQL Syncing Candidate Designs"),(0,i.kt)("h2",{id:"design-1"},"Design 1"),(0,i.kt)(o.Mermaid,{config:{},chart:"sequenceDiagram\n    participant Client\n    participant Server\n    Client->>Server: Give me all record uuids in cloud\n    Server->>Client: Here are the all records uuids on Server (A)\n    Note left of Client: Compute Missing Records<br/>B=records server doesn't have<br/>C=record uuids client is missing\n    Client->>Server: Give me the missing records (C), and here are the new records client has locally (B)\n    Server->>Client: Here are the missing records in (C)",mdxType:"Mermaid"}),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Get all record uuids"),(0,i.kt)("li",{parentName:"ol"},"Compute the difference (what's missing and what's new (only in local))"),(0,i.kt)("li",{parentName:"ol"},"Request missing records with uuids",(0,i.kt)("ol",{parentName:"li"},(0,i.kt)("li",{parentName:"ol"},"Add to local storage"))),(0,i.kt)("li",{parentName:"ol"},"Upload new records not in cloud")),(0,i.kt)("p",null,"Step 2 and 3 can be done in parallel (2 GraphQL mutations at once), no extra route needs to be created."),(0,i.kt)("h2",{id:"design-2"},"Design 2"),(0,i.kt)(o.Mermaid,{chart:"sequenceDiagram\n    participant Client\n    participant Server\n    Client->>Server: Here are all record uuids I have locally\n    Note right of Server: Compute difference using uuids\n    Server->>Client: Here are the records you don't have and records I don't have\n    Client->>Server: Upload records not in cloud",mdxType:"Mermaid"}),(0,i.kt)("h2",{id:"design-3"},"Design 3"),(0,i.kt)("p",null,"In client-side local storage, where can store whether a record has been uploaded or not."),(0,i.kt)(o.Mermaid,{chart:"sequenceDiagram\n    participant Client\n    participant Server\n    Client->>Server: Here are all record uuids I have and records I haven't uploaded<br/>Upload a bunch of records and all uuids on client side\n    Server->>Client: Here are the records you don't have<br>And a uuid-id mapping for newly uploaded Records\n    Note left of Client: Update local storage and UI<br>1. Add database id to local records identified with uuid<br>2. Add new records to local storage (sort by created time)",mdxType:"Mermaid"}),(0,i.kt)("h2",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"I will pick Design 3."),(0,i.kt)("p",null,"Design 1 relies on the most basic GraphQL queries, so I don't need to implement another one, but it takes 2 rounds (requests)."),(0,i.kt)("p",null,"Design 2 requires implementing a dedicated GraphQL request, but 2 requests are needed."),(0,i.kt)("p",null,"Design 3 requires implementing an extra GraphQL request, but it's only 1 request."),(0,i.kt)("p",null,"Design 3 is a more atomic and is worth the effort."),(0,i.kt)("p",null,"I can still make a wrapper helper for Design 1."),(0,i.kt)("p",null,"A periodic syncing should be run to prevent any errors. Period: 5 minutes."),(0,i.kt)("h1",{id:"socketio-syncing-design"},"SocketIO Syncing Design"),(0,i.kt)(o.Mermaid,{chart:'sequenceDiagram\n    participant Client\n    participant Server\n    Client->>Server: connection: send all uuids and local-only records\n    Server->>Client: "init" event: Return records not on client-side + <br> uuid-id mapping for records uploaded to server\n    Note left of Client: Update local storage and UI<br>1. Add database id to local records identified with uuid<br>2. Add new records to local storage (sort by created time)\n    loop Long Connection Syncing\n        Client->>Server: "update" event: notify server of new record upload (upload record)\n        Server->>Client: "update" event: notify client of update (send records back to client)\n    end',mdxType:"Mermaid"}),(0,i.kt)("p",null,"Version 1 assumes that the app will only work when connected to server. UI is updated after server responds."),(0,i.kt)("p",null,"The new design requires client app to work offline. The design will be similar to the regular request design above, except that this will have a long connection."),(0,i.kt)("p",null,"A periodic syncing should be run to prevent any errors. Period: ~5 minutes."))}p.isMDXComponent=!0},1748:(e,n,r)=>{var t={"./locale":9234,"./locale.js":9234};function i(e){var n=o(e);return r(n)}function o(e){if(!r.o(t,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return t[e]}i.keys=function(){return Object.keys(t)},i.resolve=o,e.exports=i,i.id=1748}}]);